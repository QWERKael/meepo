// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/pb.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	actor "github.com/AsynkronIT/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Request_MessageType int32

const (
	TEXT       Request_MessageType = 0
	MEEPO_TASK Request_MessageType = 1
)

var Request_MessageType_name = map[int32]string{
	0: "TEXT",
	1: "MEEPO_TASK",
}

var Request_MessageType_value = map[string]int32{
	"TEXT":       0,
	"MEEPO_TASK": 1,
}

func (Request_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_324342555f5f363c, []int{0, 0}
}

type Response_StateCode int32

const (
	SUCCESS Response_StateCode = 0
	FAIL    Response_StateCode = 1
	UNKNOWN Response_StateCode = 2
)

var Response_StateCode_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
	2: "UNKNOWN",
}

var Response_StateCode_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
	"UNKNOWN": 2,
}

func (Response_StateCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_324342555f5f363c, []int{1, 0}
}

type Transfer_TransferState int32

const (
	Unknown Transfer_TransferState = 0
	Req     Transfer_TransferState = 1
	OK      Transfer_TransferState = 2
	Refuse  Transfer_TransferState = 3
	Fail    Transfer_TransferState = 4
	Data    Transfer_TransferState = 5
	Done    Transfer_TransferState = 6
	Close   Transfer_TransferState = 7
)

var Transfer_TransferState_name = map[int32]string{
	0: "Unknown",
	1: "Req",
	2: "OK",
	3: "Refuse",
	4: "Fail",
	5: "Data",
	6: "Done",
	7: "Close",
}

var Transfer_TransferState_value = map[string]int32{
	"Unknown": 0,
	"Req":     1,
	"OK":      2,
	"Refuse":  3,
	"Fail":    4,
	"Data":    5,
	"Done":    6,
	"Close":   7,
}

func (Transfer_TransferState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_324342555f5f363c, []int{2, 0}
}

type Request struct {
	UUID    string              `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Sender  *actor.PID          `protobuf:"bytes,2,opt,name=Sender,proto3" json:"Sender,omitempty"`
	MsgType Request_MessageType `protobuf:"varint,3,opt,name=MsgType,proto3,enum=pb.Request_MessageType" json:"MsgType,omitempty"`
	ByteMsg []byte              `protobuf:"bytes,4,opt,name=ByteMsg,proto3" json:"ByteMsg,omitempty"`
}

func (m *Request) Reset()      { *m = Request{} }
func (*Request) ProtoMessage() {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_324342555f5f363c, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Request) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Request) GetMsgType() Request_MessageType {
	if m != nil {
		return m.MsgType
	}
	return TEXT
}

func (m *Request) GetByteMsg() []byte {
	if m != nil {
		return m.ByteMsg
	}
	return nil
}

type Response struct {
	UUID    string             `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	State   Response_StateCode `protobuf:"varint,2,opt,name=State,proto3,enum=pb.Response_StateCode" json:"State,omitempty"`
	ByteMsg []byte             `protobuf:"bytes,3,opt,name=ByteMsg,proto3" json:"ByteMsg,omitempty"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_324342555f5f363c, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Response) GetState() Response_StateCode {
	if m != nil {
		return m.State
	}
	return SUCCESS
}

func (m *Response) GetByteMsg() []byte {
	if m != nil {
		return m.ByteMsg
	}
	return nil
}

type Transfer struct {
	FileUUID string                 `protobuf:"bytes,1,opt,name=FileUUID,proto3" json:"FileUUID,omitempty"`
	Sender   *actor.PID             `protobuf:"bytes,2,opt,name=Sender,proto3" json:"Sender,omitempty"`
	State    Transfer_TransferState `protobuf:"varint,3,opt,name=State,proto3,enum=pb.Transfer_TransferState" json:"State,omitempty"`
	Size_    int64                  `protobuf:"varint,4,opt,name=Size,proto3" json:"Size,omitempty"`
	Context  []byte                 `protobuf:"bytes,5,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (m *Transfer) Reset()      { *m = Transfer{} }
func (*Transfer) ProtoMessage() {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_324342555f5f363c, []int{2}
}
func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(m, src)
}
func (m *Transfer) XXX_Size() int {
	return m.Size()
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetFileUUID() string {
	if m != nil {
		return m.FileUUID
	}
	return ""
}

func (m *Transfer) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Transfer) GetState() Transfer_TransferState {
	if m != nil {
		return m.State
	}
	return Unknown
}

func (m *Transfer) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Transfer) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.Request_MessageType", Request_MessageType_name, Request_MessageType_value)
	proto.RegisterEnum("pb.Response_StateCode", Response_StateCode_name, Response_StateCode_value)
	proto.RegisterEnum("pb.Transfer_TransferState", Transfer_TransferState_name, Transfer_TransferState_value)
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Response)(nil), "pb.Response")
	proto.RegisterType((*Transfer)(nil), "pb.Transfer")
}

func init() { proto.RegisterFile("pb/pb.proto", fileDescriptor_324342555f5f363c) }

var fileDescriptor_324342555f5f363c = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x8e, 0xd3, 0x4c,
	0x14, 0xc5, 0x3d, 0xce, 0x1f, 0x67, 0x6f, 0xbe, 0x2f, 0x1a, 0x4d, 0x01, 0x56, 0x8a, 0x51, 0xe4,
	0x86, 0x14, 0xe0, 0x40, 0x40, 0xf4, 0xd9, 0x24, 0x2b, 0x45, 0x21, 0xc9, 0xca, 0x76, 0x04, 0x1d,
	0xb2, 0x77, 0xef, 0x86, 0x68, 0x83, 0xc7, 0xeb, 0x71, 0x04, 0xa1, 0xe2, 0x09, 0x10, 0x1d, 0xaf,
	0xc0, 0x1b, 0xf0, 0x0a, 0x94, 0x29, 0xb7, 0x24, 0x4e, 0x43, 0xb9, 0x8f, 0x80, 0x3c, 0x4e, 0xa2,
	0xac, 0x44, 0x41, 0x77, 0xee, 0xdc, 0x73, 0xaf, 0xce, 0xef, 0x6a, 0xa0, 0x1a, 0x05, 0xad, 0x28,
	0xb0, 0xa3, 0x58, 0x24, 0x82, 0xe9, 0x51, 0x50, 0x7f, 0x39, 0x9b, 0x27, 0xef, 0x96, 0x81, 0x7d,
	0x21, 0xde, 0xb7, 0x3a, 0x72, 0x15, 0x5e, 0xc7, 0x22, 0x1c, 0x78, 0x2d, 0x65, 0xf0, 0x2f, 0x12,
	0x11, 0x3f, 0x99, 0x89, 0x96, 0x12, 0xf9, 0x9b, 0xcc, 0x67, 0xad, 0x1f, 0x04, 0x0c, 0x07, 0x6f,
	0x96, 0x28, 0x13, 0xc6, 0xa0, 0x38, 0x9d, 0x0e, 0x7a, 0x26, 0x69, 0x90, 0xe6, 0x89, 0xa3, 0x34,
	0xb3, 0xa0, 0xec, 0x62, 0x78, 0x89, 0xb1, 0xa9, 0x37, 0x48, 0xb3, 0xda, 0x06, 0x5b, 0x2d, 0xb1,
	0xcf, 0x07, 0x3d, 0x67, 0xd7, 0x61, 0xcf, 0xc0, 0x18, 0xc9, 0x99, 0xb7, 0x8a, 0xd0, 0x2c, 0x34,
	0x48, 0xb3, 0xd6, 0x7e, 0x68, 0x47, 0x81, 0xbd, 0xdb, 0x6a, 0x8f, 0x50, 0x4a, 0x7f, 0x86, 0x59,
	0xdb, 0xd9, 0xfb, 0x98, 0x09, 0xc6, 0xe9, 0x2a, 0xc1, 0x91, 0x9c, 0x99, 0xc5, 0x06, 0x69, 0xfe,
	0xe7, 0xec, 0x4b, 0xeb, 0x11, 0x54, 0x8f, 0x26, 0x58, 0x05, 0x8a, 0x5e, 0xff, 0x8d, 0x47, 0x35,
	0x56, 0x03, 0x18, 0xf5, 0xfb, 0xe7, 0x93, 0xb7, 0x5e, 0xc7, 0x1d, 0x52, 0x62, 0x7d, 0x23, 0x50,
	0x71, 0x50, 0x46, 0x22, 0x94, 0xf8, 0xd7, 0xe8, 0x8f, 0xa1, 0xe4, 0x26, 0x7e, 0x82, 0x2a, 0x79,
	0xad, 0xfd, 0x20, 0x0f, 0x95, 0x0f, 0xd8, 0xaa, 0xd3, 0x15, 0x97, 0xe8, 0xe4, 0xa6, 0xe3, 0x44,
	0x85, 0xfb, 0x89, 0x5a, 0x70, 0x72, 0x70, 0xb3, 0x2a, 0x18, 0xee, 0xb4, 0xdb, 0xed, 0xbb, 0x2e,
	0xd5, 0xb2, 0x70, 0x67, 0x9d, 0xc1, 0x2b, 0x4a, 0xb2, 0xe7, 0xe9, 0x78, 0x38, 0x9e, 0xbc, 0x1e,
	0x53, 0xdd, 0xfa, 0xa2, 0x43, 0xc5, 0x8b, 0xfd, 0x50, 0x5e, 0x61, 0xcc, 0xea, 0x50, 0x39, 0x9b,
	0x2f, 0xf0, 0x28, 0xdd, 0xa1, 0xfe, 0xa7, 0xe3, 0x3e, 0xdd, 0x53, 0xe4, 0xa7, 0xad, 0x67, 0x14,
	0xfb, 0xe5, 0x07, 0xa1, 0x1c, 0x7b, 0x12, 0x06, 0x45, 0x77, 0xfe, 0x09, 0xd5, 0x61, 0x0b, 0x8e,
	0xd2, 0x19, 0x5d, 0x57, 0x84, 0x09, 0x7e, 0x4c, 0xcc, 0x52, 0x4e, 0xb7, 0x2b, 0xad, 0x00, 0xfe,
	0xbf, 0xb7, 0x45, 0xa1, 0x84, 0xd7, 0xa1, 0xf8, 0x10, 0x52, 0x8d, 0x19, 0x50, 0x70, 0xf0, 0x86,
	0x12, 0x56, 0x06, 0x7d, 0x32, 0xa4, 0x3a, 0x03, 0x28, 0x3b, 0x78, 0xb5, 0x94, 0x48, 0x0b, 0x0a,
	0xdf, 0x9f, 0x2f, 0x68, 0x31, 0x53, 0x3d, 0x3f, 0xf1, 0x69, 0x49, 0x29, 0x11, 0x22, 0x2d, 0xb3,
	0x13, 0x28, 0x75, 0x17, 0x42, 0x22, 0x35, 0x4e, 0x5f, 0xac, 0x37, 0x5c, 0xbb, 0xdd, 0x70, 0xed,
	0x6e, 0xc3, 0xc9, 0xe7, 0x94, 0x93, 0xef, 0x29, 0x27, 0x3f, 0x53, 0x4e, 0xd6, 0x29, 0x27, 0xbf,
	0x52, 0x4e, 0x7e, 0xa7, 0x5c, 0xbb, 0x4b, 0x39, 0xf9, 0xba, 0xe5, 0xda, 0x7a, 0xcb, 0xb5, 0xdb,
	0x2d, 0xd7, 0x82, 0xb2, 0xfa, 0xa1, 0xcf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xe0, 0x2d,
	0x89, 0xec, 0x02, 0x00, 0x00,
}

func (x Request_MessageType) String() string {
	s, ok := Request_MessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Response_StateCode) String() string {
	s, ok := Response_StateCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Transfer_TransferState) String() string {
	s, ok := Transfer_TransferState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.MsgType != that1.MsgType {
		return false
	}
	if !bytes.Equal(this.ByteMsg, that1.ByteMsg) {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !bytes.Equal(this.ByteMsg, that1.ByteMsg) {
		return false
	}
	return true
}
func (this *Transfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transfer)
	if !ok {
		that2, ok := that.(Transfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileUUID != that1.FileUUID {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	if !bytes.Equal(this.Context, that1.Context) {
		return false
	}
	return true
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Request{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "MsgType: "+fmt.Sprintf("%#v", this.MsgType)+",\n")
	s = append(s, "ByteMsg: "+fmt.Sprintf("%#v", this.ByteMsg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Response{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "ByteMsg: "+fmt.Sprintf("%#v", this.ByteMsg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Transfer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Transfer{")
	s = append(s, "FileUUID: "+fmt.Sprintf("%#v", this.FileUUID)+",\n")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ByteMsg) > 0 {
		i -= len(m.ByteMsg)
		copy(dAtA[i:], m.ByteMsg)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ByteMsg)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgType != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x18
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintPb(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ByteMsg) > 0 {
		i -= len(m.ByteMsg)
		copy(dAtA[i:], m.ByteMsg)
		i = encodeVarintPb(dAtA, i, uint64(len(m.ByteMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintPb(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Transfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintPb(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Size_ != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintPb(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileUUID) > 0 {
		i -= len(m.FileUUID)
		copy(dAtA[i:], m.FileUUID)
		i = encodeVarintPb(dAtA, i, uint64(len(m.FileUUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovPb(uint64(m.MsgType))
	}
	l = len(m.ByteMsg)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPb(uint64(m.State))
	}
	l = len(m.ByteMsg)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	return n
}

func (m *Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileUUID)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovPb(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPb(uint64(m.State))
	}
	if m.Size_ != 0 {
		n += 1 + sovPb(uint64(m.Size_))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovPb(uint64(l))
	}
	return n
}

func sovPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPb(x uint64) (n int) {
	return sovPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`MsgType:` + fmt.Sprintf("%v", this.MsgType) + `,`,
		`ByteMsg:` + fmt.Sprintf("%v", this.ByteMsg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`ByteMsg:` + fmt.Sprintf("%v", this.ByteMsg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Transfer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transfer{`,
		`FileUUID:` + fmt.Sprintf("%v", this.FileUUID) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= Request_MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByteMsg = append(m.ByteMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ByteMsg == nil {
				m.ByteMsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Response_StateCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByteMsg = append(m.ByteMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ByteMsg == nil {
				m.ByteMsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Transfer_TransferState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPb = fmt.Errorf("proto: unexpected end of group")
)
